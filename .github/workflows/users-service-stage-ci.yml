name: users-service-ci-test

on:
  #  push:
  #     branches:
  #     - dev
  pull_request:
  workflow_dispatch: # setting for manual runs of the pipeline.
  
  
env: # values of env vars the app will need to launch r defined here
  NODE_ENV: staging
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS-REGION: eu-west-1 #pipeline needs this to use d keys above
# NPM_TOKEN


jobs:
  build: # first job to build the application first with npm.
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.15

      - name: Install dependencies # force a reinstallation of all dependencies in package.json
        run: npm install --force

      - name: Run the build # run the build 
        run: npm run build

      - name: Start #  start the server
              # - this uses the startscript in the script file
        run: npm run start &

  Test_if_the_update_can_build_into_an_image:
    runs-on: ubuntu-latest

    steps:
      - name: Login to Amazon ECR
        id: ecr-login-id #this is an id for this step. So u can use the id to ref d step later in d workflow.
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build The Docker Image - But no push.
        # THIS IS WHERE PROD VARS N TEST VARS ARE DEFINED N USED BASED ON BRANCH RUNNING FROM
        id: builder_pusher
        env: # here we r creating env vars n assigning values to them.
          ECR_REGISTRY: ${{ steps.ecr-login-id.outputs.registry }}
          ECR_REPOSITORY: users-service-test
          IMAGE_TAG: ${{github.run_id}}
          ECS_CLUSTER: traderapp_dev # Amazon ECS cluster name
          ECS_SERVICE: users-service-test # Your Amazon ECS service name

        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Docker Image build is completed. No push to ECR specified."

      - name: Run Docker Container
        run: docker run -d -p 8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#       echo "::set-output name=built_image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#end of CI
