name: users-service-cicd-pipeline

on:
  push:
     branches:
       - dev
#       - pull_request
  workflow_dispatch: # manual runs of the pipeline.

jobs:
  build:   # first job - to build the application first with npm
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code # first step in this build JOB is to checkout code from branch
        uses: actions/checkout@v2

      - name: Install Node.js    # second step is to set up environment for node build
        uses: actions/setup-node@v2
        with:
          node-version: 16.15

      - name: Install dependencies  # third step is to install dependencies
        run: npm install

      - name: Build      # fourth step is to test by trying to build node 
      # - this uses the build script in the script file
        run: npm run build


  docker_build_then_push_to_ecr_and_ecs:
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: ecr-login-id #this is an id for this step. So u can use the id to ref d step later in d workflow.
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker Image, tag and push image to ECR
      # THIS IS WHERE PROD VARS N TEST VARS ARE DEFINED N USED BASED ON BRANCH RUNNING FROM
      id: builder_pusher
      env:   # here we r creating env vars n assigning values to them.
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ECR_REGISTRY: ${{ steps.ecr-login-id.outputs.registry }}
        ECR_REPOSITORY: users-service-test
        IMAGE_TAG: ${{github.run_id}}
        TEMPORARY_CONTAINER: container-${{github.run_id}}
        ECS_CLUSTER: traderapp_dev   # Amazon ECS cluster name
        ECS_SERVICE: userssrvc-ecs-service-test # Your Amazon ECS service name

      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo $TEMPORARY_CONTAINER "is the the new container name"

    # test the newly build image in a new server
    - name: Test the new image in a new container/server
      run: |
        if docker run -d --name $TEMPORARY_CONTAINER -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -p 80:80 $IMAGE_TAG; then
          docker logs $TEMPORARY_CONTAINER
          echo "Failed to start the container. Stopping the workflow..."
          exit 1  # Set a non-zero exit code to stop the workflow
        else
          echo "Container started successfully. Proceeding with the workflow..."
          echo "our temporary container name is : $TEMPORARY_CONTAINER
                        
        docker stop $TEMPORARY_CONTAINER
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=built_image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#end of CI

#start CD: first is to download the task definition.json file from ECS.
    - name: Download task definition
      run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.USERS_SERVICE_TASK_DEF_ARN }} \
          --query taskDefinition > task-definition.json

    - name: Put the newly built image into the ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ secrets.USERS_SRVC_CONTAINER_NAME }}
        image: ${{ steps.builder_pusher.outputs.built_image }}

    - name: Deploy the ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
